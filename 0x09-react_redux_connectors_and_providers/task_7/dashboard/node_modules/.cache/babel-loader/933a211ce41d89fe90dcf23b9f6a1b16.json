{"ast":null,"code":"// src/actions/uiActionCreators.test.js\n\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport fetchMock from 'fetch-mock';\nimport { LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE } from './uiActionTypes';\nimport { loginRequest, login, loginSuccess, loginFailure } from './uiActionCreators';\nvar middlewares = [thunk];\nvar mockStore = configureMockStore(middlewares);\ndescribe('uiActionCreators async actions', function () {\n  afterEach(function () {\n    fetchMock.restore();\n  });\n  it('creates LOGIN and LOGIN_SUCCESS when fetching login has been done', function () {\n    fetchMock.getOnce('/dist/login-success.json', {\n      body: {\n        user: 'test'\n      },\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    var expectedActions = [{\n      type: LOGIN,\n      user: {\n        email: 'test@example.com',\n        password: 'password123'\n      }\n    }, {\n      type: LOGIN_SUCCESS\n    }];\n    var store = mockStore({});\n    return store.dispatch(loginRequest('test@example.com', 'password123')).then(function () {\n      expect(store.getActions()).toEqual(expectedActions);\n    });\n  });\n  it('creates LOGIN and LOGIN_FAILURE when fetching login fails', function () {\n    fetchMock.getOnce('/dist/login-success.json', {\n      throws: new Error('Network response was not ok')\n    });\n    var expectedActions = [{\n      type: LOGIN,\n      user: {\n        email: 'test@example.com',\n        password: 'password123'\n      }\n    }, {\n      type: LOGIN_FAILURE\n    }];\n    var store = mockStore({});\n    return store.dispatch(loginRequest('test@example.com', 'password123')).then(function () {\n      expect(store.getActions()).toEqual(expectedActions);\n    });\n  });\n});","map":{"version":3,"names":["configureMockStore","thunk","fetchMock","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","loginRequest","login","loginSuccess","loginFailure","middlewares","mockStore","describe","afterEach","restore","it","getOnce","body","user","headers","expectedActions","type","email","password","store","dispatch","then","expect","getActions","toEqual","throws","Error"],"sources":["/Users/freethinking/Desktop/codecademy/PetPhysique_Pro/alx-react/0x09-react_redux_connectors_and_providers/task_3/dashboard/src/actions/uiActionCreators.js"],"sourcesContent":["// src/actions/uiActionCreators.test.js\n\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport fetchMock from 'fetch-mock';\nimport { LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE } from './uiActionTypes';\nimport { loginRequest, login, loginSuccess, loginFailure } from './uiActionCreators';\n\nconst middlewares = [thunk];\nconst mockStore = configureMockStore(middlewares);\n\ndescribe('uiActionCreators async actions', () => {\n  afterEach(() => {\n    fetchMock.restore();\n  });\n\n  it('creates LOGIN and LOGIN_SUCCESS when fetching login has been done', () => {\n    fetchMock.getOnce('/dist/login-success.json', {\n      body: { user: 'test' },\n      headers: { 'content-type': 'application/json' }\n    });\n\n    const expectedActions = [\n      { type: LOGIN, user: { email: 'test@example.com', password: 'password123' } },\n      { type: LOGIN_SUCCESS }\n    ];\n    const store = mockStore({});\n\n    return store.dispatch(loginRequest('test@example.com', 'password123')).then(() => {\n      expect(store.getActions()).toEqual(expectedActions);\n    });\n  });\n\n  it('creates LOGIN and LOGIN_FAILURE when fetching login fails', () => {\n    fetchMock.getOnce('/dist/login-success.json', {\n      throws: new Error('Network response was not ok')\n    });\n\n    const expectedActions = [\n      { type: LOGIN, user: { email: 'test@example.com', password: 'password123' } },\n      { type: LOGIN_FAILURE }\n    ];\n    const store = mockStore({});\n\n    return store.dispatch(loginRequest('test@example.com', 'password123')).then(() => {\n      expect(store.getActions()).toEqual(expectedActions);\n    });\n  });\n});"],"mappings":"AAAA;;AAEA,OAAOA,kBAAkB,MAAM,kBAAkB;AACjD,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,KAAK,EAAEC,aAAa,EAAEC,aAAa,QAAQ,iBAAiB;AACrE,SAASC,YAAY,EAAEC,KAAK,EAAEC,YAAY,EAAEC,YAAY,QAAQ,oBAAoB;AAEpF,IAAMC,WAAW,GAAG,CAACT,KAAK,CAAC;AAC3B,IAAMU,SAAS,GAAGX,kBAAkB,CAACU,WAAW,CAAC;AAEjDE,QAAQ,CAAC,gCAAgC,EAAE,YAAM;EAC/CC,SAAS,CAAC,YAAM;IACdX,SAAS,CAACY,OAAO,CAAC,CAAC;EACrB,CAAC,CAAC;EAEFC,EAAE,CAAC,mEAAmE,EAAE,YAAM;IAC5Eb,SAAS,CAACc,OAAO,CAAC,0BAA0B,EAAE;MAC5CC,IAAI,EAAE;QAAEC,IAAI,EAAE;MAAO,CAAC;MACtBC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEF,IAAMC,eAAe,GAAG,CACtB;MAAEC,IAAI,EAAElB,KAAK;MAAEe,IAAI,EAAE;QAAEI,KAAK,EAAE,kBAAkB;QAAEC,QAAQ,EAAE;MAAc;IAAE,CAAC,EAC7E;MAAEF,IAAI,EAAEjB;IAAc,CAAC,CACxB;IACD,IAAMoB,KAAK,GAAGb,SAAS,CAAC,CAAC,CAAC,CAAC;IAE3B,OAAOa,KAAK,CAACC,QAAQ,CAACnB,YAAY,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,CAACoB,IAAI,CAAC,YAAM;MAChFC,MAAM,CAACH,KAAK,CAACI,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,eAAe,CAAC;IACrD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFL,EAAE,CAAC,2DAA2D,EAAE,YAAM;IACpEb,SAAS,CAACc,OAAO,CAAC,0BAA0B,EAAE;MAC5Cc,MAAM,EAAE,IAAIC,KAAK,CAAC,6BAA6B;IACjD,CAAC,CAAC;IAEF,IAAMX,eAAe,GAAG,CACtB;MAAEC,IAAI,EAAElB,KAAK;MAAEe,IAAI,EAAE;QAAEI,KAAK,EAAE,kBAAkB;QAAEC,QAAQ,EAAE;MAAc;IAAE,CAAC,EAC7E;MAAEF,IAAI,EAAEhB;IAAc,CAAC,CACxB;IACD,IAAMmB,KAAK,GAAGb,SAAS,CAAC,CAAC,CAAC,CAAC;IAE3B,OAAOa,KAAK,CAACC,QAAQ,CAACnB,YAAY,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,CAACoB,IAAI,CAAC,YAAM;MAChFC,MAAM,CAACH,KAAK,CAACI,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,eAAe,CAAC;IACrD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}