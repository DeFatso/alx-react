{"ast":null,"code":"import _classCallCheck from \"/Users/freethinking/Desktop/codecademy/PetPhysique_Pro/alx-react/0x09-react_redux_connectors_and_providers/task_3/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/freethinking/Desktop/codecademy/PetPhysique_Pro/alx-react/0x09-react_redux_connectors_and_providers/task_3/dashboard/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getDebug } from './debug.js';\nvar responseConfigProps = ['body', 'headers', 'throws', 'status', 'redirectUrl'];\nvar ResponseBuilder = /*#__PURE__*/function () {\n  function ResponseBuilder(options) {\n    _classCallCheck(this, ResponseBuilder);\n    this.debug = getDebug('ResponseBuilder()');\n    this.debug('Response builder created with options', options);\n    Object.assign(this, options);\n  }\n  _createClass(ResponseBuilder, [{\n    key: \"exec\",\n    value: function exec() {\n      this.debug('building response');\n      this.normalizeResponseConfig();\n      this.constructFetchOpts();\n      this.constructResponseBody();\n      var realResponse = new this.fetchMock.config.Response(this.body, this.options);\n      var proxyResponse = this.buildObservableResponse(realResponse);\n      return [realResponse, proxyResponse];\n    }\n  }, {\n    key: \"sendAsObject\",\n    value: function sendAsObject() {\n      var _this = this;\n      if (responseConfigProps.some(function (prop) {\n        return _this.responseConfig[prop];\n      })) {\n        if (Object.keys(this.responseConfig).every(function (key) {\n          return responseConfigProps.includes(key);\n        })) {\n          return false;\n        }\n        return true;\n      }\n      return true;\n    }\n  }, {\n    key: \"normalizeResponseConfig\",\n    value: function normalizeResponseConfig() {\n      // If the response config looks like a status, start to generate a simple response\n      if (typeof this.responseConfig === 'number') {\n        this.debug('building response using status', this.responseConfig);\n        this.responseConfig = {\n          status: this.responseConfig\n        };\n        // If the response config is not an object, or is an object that doesn't use\n        // any reserved properties, assume it is meant to be the body of the response\n      } else if (typeof this.responseConfig === 'string' || this.sendAsObject()) {\n        this.debug('building text response from', this.responseConfig);\n        this.responseConfig = {\n          body: this.responseConfig\n        };\n      }\n    }\n  }, {\n    key: \"validateStatus\",\n    value: function validateStatus(status) {\n      if (!status) {\n        this.debug('No status provided. Defaulting to 200');\n        return 200;\n      }\n      if (typeof status === 'number' && parseInt(status, 10) !== status && status >= 200 || status < 600) {\n        this.debug('Valid status provided', status);\n        return status;\n      }\n      throw new TypeError(\"fetch-mock: Invalid status \".concat(status, \" passed on response object.\\nTo respond with a JSON object that has status as a property assign the object to body\\ne.g. {\\\"body\\\": {\\\"status: \\\"registered\\\"}}\"));\n    }\n  }, {\n    key: \"constructFetchOpts\",\n    value: function constructFetchOpts() {\n      this.options = this.responseConfig.options || {};\n      this.options.url = this.responseConfig.redirectUrl || this.url;\n      this.options.status = this.validateStatus(this.responseConfig.status);\n      this.options.statusText = this.fetchMock.statusTextMap[String(this.options.status)];\n\n      // Set up response headers. The empty object is to cope with\n      // new Headers(undefined) throwing in Chrome\n      // https://code.google.com/p/chromium/issues/detail?id=335871\n      this.options.headers = new this.fetchMock.config.Headers(this.responseConfig.headers || {});\n    }\n  }, {\n    key: \"getOption\",\n    value: function getOption(name) {\n      return this.fetchMock.getOption(name, this.route);\n    }\n  }, {\n    key: \"convertToJson\",\n    value: function convertToJson() {\n      // convert to json if we need to\n      if (this.getOption('sendAsJson') && this.responseConfig.body != null &&\n      //eslint-disable-line\n      typeof this.body === 'object') {\n        this.debug('Stringifying JSON response body');\n        this.body = JSON.stringify(this.body);\n        if (!this.options.headers.has('Content-Type')) {\n          this.options.headers.set('Content-Type', 'application/json');\n        }\n      }\n    }\n  }, {\n    key: \"setContentLength\",\n    value: function setContentLength() {\n      // add a Content-Length header if we need to\n      if (this.getOption('includeContentLength') && typeof this.body === 'string' && !this.options.headers.has('Content-Length')) {\n        this.debug('Setting content-length header:', this.body.length.toString());\n        this.options.headers.set('Content-Length', this.body.length.toString());\n      }\n    }\n  }, {\n    key: \"constructResponseBody\",\n    value: function constructResponseBody() {\n      // start to construct the body\n      this.body = this.responseConfig.body;\n      this.convertToJson();\n      this.setContentLength();\n    }\n  }, {\n    key: \"buildObservableResponse\",\n    value: function buildObservableResponse(response) {\n      var _this2 = this;\n      var fetchMock = this.fetchMock;\n      response._fmResults = {};\n      // Using a proxy means we can set properties that may not be writable on\n      // the original Response. It also means we can track the resolution of\n      // promises returned by res.json(), res.text() etc\n      this.debug('Wrapping Response in ES proxy for observability');\n      return new Proxy(response, {\n        get: function get(originalResponse, name) {\n          if (_this2.responseConfig.redirectUrl) {\n            if (name === 'url') {\n              _this2.debug('Retrieving redirect url', _this2.responseConfig.redirectUrl);\n              return _this2.responseConfig.redirectUrl;\n            }\n            if (name === 'redirected') {\n              _this2.debug('Retrieving redirected status', true);\n              return true;\n            }\n          }\n          if (typeof originalResponse[name] === 'function') {\n            _this2.debug('Wrapping body promises in ES proxies for observability');\n            return new Proxy(originalResponse[name], {\n              apply: function apply(func, thisArg, args) {\n                _this2.debug(\"Calling res.\".concat(name));\n                var result = func.apply(response, args);\n                if (result.then) {\n                  fetchMock._holdingPromises.push(result.catch(function () {\n                    return null;\n                  }));\n                  originalResponse._fmResults[name] = result;\n                }\n                return result;\n              }\n            });\n          }\n          return originalResponse[name];\n        }\n      });\n    }\n  }]);\n  return ResponseBuilder;\n}();\nexport default (function (options) {\n  return new ResponseBuilder(options).exec();\n});","map":{"version":3,"names":["getDebug","responseConfigProps","ResponseBuilder","options","_classCallCheck","debug","Object","assign","_createClass","key","value","exec","normalizeResponseConfig","constructFetchOpts","constructResponseBody","realResponse","fetchMock","config","Response","body","proxyResponse","buildObservableResponse","sendAsObject","_this","some","prop","responseConfig","keys","every","includes","status","validateStatus","parseInt","TypeError","concat","url","redirectUrl","statusText","statusTextMap","String","headers","Headers","getOption","name","route","convertToJson","JSON","stringify","has","set","setContentLength","length","toString","response","_this2","_fmResults","Proxy","get","originalResponse","apply","func","thisArg","args","result","then","_holdingPromises","push","catch"],"sources":["/Users/freethinking/Desktop/codecademy/PetPhysique_Pro/alx-react/0x09-react_redux_connectors_and_providers/task_3/dashboard/node_modules/fetch-mock/src/lib/response-builder.js"],"sourcesContent":["import { getDebug } from './debug.js';\n\nconst responseConfigProps = [\n\t'body',\n\t'headers',\n\t'throws',\n\t'status',\n\t'redirectUrl',\n];\n\nclass ResponseBuilder {\n\tconstructor(options) {\n\t\tthis.debug = getDebug('ResponseBuilder()');\n\t\tthis.debug('Response builder created with options', options);\n\t\tObject.assign(this, options);\n\t}\n\n\texec() {\n\t\tthis.debug('building response');\n\t\tthis.normalizeResponseConfig();\n\t\tthis.constructFetchOpts();\n\t\tthis.constructResponseBody();\n\n\t\tconst realResponse = new this.fetchMock.config.Response(\n\t\t\tthis.body,\n\t\t\tthis.options,\n\t\t);\n\n\t\tconst proxyResponse = this.buildObservableResponse(realResponse);\n\t\treturn [realResponse, proxyResponse];\n\t}\n\n\tsendAsObject() {\n\t\tif (responseConfigProps.some((prop) => this.responseConfig[prop])) {\n\t\t\tif (\n\t\t\t\tObject.keys(this.responseConfig).every((key) =>\n\t\t\t\t\tresponseConfigProps.includes(key),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t}\n\n\tnormalizeResponseConfig() {\n\t\t// If the response config looks like a status, start to generate a simple response\n\t\tif (typeof this.responseConfig === 'number') {\n\t\t\tthis.debug('building response using status', this.responseConfig);\n\t\t\tthis.responseConfig = {\n\t\t\t\tstatus: this.responseConfig,\n\t\t\t};\n\t\t\t// If the response config is not an object, or is an object that doesn't use\n\t\t\t// any reserved properties, assume it is meant to be the body of the response\n\t\t} else if (typeof this.responseConfig === 'string' || this.sendAsObject()) {\n\t\t\tthis.debug('building text response from', this.responseConfig);\n\t\t\tthis.responseConfig = {\n\t\t\t\tbody: this.responseConfig,\n\t\t\t};\n\t\t}\n\t}\n\n\tvalidateStatus(status) {\n\t\tif (!status) {\n\t\t\tthis.debug('No status provided. Defaulting to 200');\n\t\t\treturn 200;\n\t\t}\n\n\t\tif (\n\t\t\t(typeof status === 'number' &&\n\t\t\t\tparseInt(status, 10) !== status &&\n\t\t\t\tstatus >= 200) ||\n\t\t\tstatus < 600\n\t\t) {\n\t\t\tthis.debug('Valid status provided', status);\n\t\t\treturn status;\n\t\t}\n\n\t\tthrow new TypeError(`fetch-mock: Invalid status ${status} passed on response object.\nTo respond with a JSON object that has status as a property assign the object to body\ne.g. {\"body\": {\"status: \"registered\"}}`);\n\t}\n\n\tconstructFetchOpts() {\n\t\tthis.options = this.responseConfig.options || {};\n\t\tthis.options.url = this.responseConfig.redirectUrl || this.url;\n\t\tthis.options.status = this.validateStatus(this.responseConfig.status);\n\t\tthis.options.statusText =\n\t\t\tthis.fetchMock.statusTextMap[String(this.options.status)];\n\n\t\t// Set up response headers. The empty object is to cope with\n\t\t// new Headers(undefined) throwing in Chrome\n\t\t// https://code.google.com/p/chromium/issues/detail?id=335871\n\t\tthis.options.headers = new this.fetchMock.config.Headers(\n\t\t\tthis.responseConfig.headers || {},\n\t\t);\n\t}\n\n\tgetOption(name) {\n\t\treturn this.fetchMock.getOption(name, this.route);\n\t}\n\n\tconvertToJson() {\n\t\t// convert to json if we need to\n\t\tif (\n\t\t\tthis.getOption('sendAsJson') &&\n\t\t\tthis.responseConfig.body != null && //eslint-disable-line\n\t\t\ttypeof this.body === 'object'\n\t\t) {\n\t\t\tthis.debug('Stringifying JSON response body');\n\t\t\tthis.body = JSON.stringify(this.body);\n\t\t\tif (!this.options.headers.has('Content-Type')) {\n\t\t\t\tthis.options.headers.set('Content-Type', 'application/json');\n\t\t\t}\n\t\t}\n\t}\n\n\tsetContentLength() {\n\t\t// add a Content-Length header if we need to\n\t\tif (\n\t\t\tthis.getOption('includeContentLength') &&\n\t\t\ttypeof this.body === 'string' &&\n\t\t\t!this.options.headers.has('Content-Length')\n\t\t) {\n\t\t\tthis.debug('Setting content-length header:', this.body.length.toString());\n\t\t\tthis.options.headers.set('Content-Length', this.body.length.toString());\n\t\t}\n\t}\n\n\tconstructResponseBody() {\n\t\t// start to construct the body\n\t\tthis.body = this.responseConfig.body;\n\t\tthis.convertToJson();\n\t\tthis.setContentLength();\n\t}\n\n\tbuildObservableResponse(response) {\n\t\tconst { fetchMock } = this;\n\t\tresponse._fmResults = {};\n\t\t// Using a proxy means we can set properties that may not be writable on\n\t\t// the original Response. It also means we can track the resolution of\n\t\t// promises returned by res.json(), res.text() etc\n\t\tthis.debug('Wrapping Response in ES proxy for observability');\n\t\treturn new Proxy(response, {\n\t\t\tget: (originalResponse, name) => {\n\t\t\t\tif (this.responseConfig.redirectUrl) {\n\t\t\t\t\tif (name === 'url') {\n\t\t\t\t\t\tthis.debug(\n\t\t\t\t\t\t\t'Retrieving redirect url',\n\t\t\t\t\t\t\tthis.responseConfig.redirectUrl,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn this.responseConfig.redirectUrl;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name === 'redirected') {\n\t\t\t\t\t\tthis.debug('Retrieving redirected status', true);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof originalResponse[name] === 'function') {\n\t\t\t\t\tthis.debug('Wrapping body promises in ES proxies for observability');\n\t\t\t\t\treturn new Proxy(originalResponse[name], {\n\t\t\t\t\t\tapply: (func, thisArg, args) => {\n\t\t\t\t\t\t\tthis.debug(`Calling res.${name}`);\n\t\t\t\t\t\t\tconst result = func.apply(response, args);\n\t\t\t\t\t\t\tif (result.then) {\n\t\t\t\t\t\t\t\tfetchMock._holdingPromises.push(result.catch(() => null));\n\t\t\t\t\t\t\t\toriginalResponse._fmResults[name] = result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn originalResponse[name];\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport default (options) => new ResponseBuilder(options).exec();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}